{"version":3,"sources":["components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","assignNewQuoteIndex","selectedQuote","Card","CardContent","Typography","id","quote","author","Button","size","onClick","IconButton","target","href","icon","faTwitter","App","props","state","quotes","selectedQuoteIndex","generateNewQuoteIndex","bind","fetch","then","data","json","setState","len","this","length","Math","floor","random","undefined","alert","console","log","Grid","className","classes","container","justify","xs","lg","item","Number","isInteger","React","Component","withStyles","alignItems","display","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yVA8BeA,EApBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,oBAAqBC,EAAxB,EAAwBA,cAAxB,OACjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,GAAG,QACVJ,EAAcK,MADnB,MAC4B,0BAAMD,GAAG,UAAUJ,EAAcM,UAGjE,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAD,CAAQH,GAAG,YAAYI,KAAK,QAAQC,QAASV,GAA7C,gBACA,kBAACW,EAAA,EAAD,CACIN,GAAG,cACHO,OAAO,SACPC,KAAI,gDAA2CZ,EAAcK,MAAzD,6BAEJ,kBAAC,IAAD,CAAiBQ,KAAMC,IAAWN,KAAK,W,eCXjDO,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,GACRC,mBAAoB,MAExB,EAAKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKtB,oBAAsB,EAAKA,oBAAoBsB,KAAzB,gBAPZ,E,gEAUE,IAAD,OAChBC,MAAM,yIACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAL,GAAM,OAAI,EAAKQ,SAAS,CAAER,UAAU,EAAKnB,0B,8CAWnD,IAAM4B,EAAMC,KAAKX,MAAMC,OAAOW,OAC9B,OAAOF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,QAAOM,I,4CAI/CL,KAAKF,SAAS,CAACP,mBAAoBS,KAAKR,4B,8CAIxCc,MAAM,MACNC,QAAQC,IAAI,Q,+BAKZ,OADAD,QAAQC,IAAIR,KAAKX,MAAMC,OAAO,IAE1B,kBAACmB,EAAA,EAAD,CAAMC,UAAWV,KAAKZ,MAAMuB,QAAQC,UAAWpC,GAAG,YAAYqC,QAAQ,SAASD,WAAS,GACpF,kBAACH,EAAA,EAAD,CAAMK,GAAI,GAAIC,GAAI,EAAGC,MAAI,GAEjBhB,KAAK5B,cACD,kBAAC,EAAD,CAAcA,cAAe4B,KAAK5B,cAAeD,oBAAsB6B,KAAK7B,sBAC7E,S,oCA5BnB,GAAK6B,KAAKX,MAAMC,OAAOW,QAAWgB,OAAOC,UAAUlB,KAAKX,MAAME,oBAG9D,OAAOS,KAAKX,MAAMC,OAAOU,KAAKX,MAAME,wB,GArB1B4B,IAAMC,WAuDTC,cA/DA,CACXT,UAAW,CACPU,WAAY,SACZC,QAAS,OACTC,OAAQ,UA2DDH,CAAmBlC,GCxDdsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.7d6c10ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardAction from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote }) => (\r\n    <Card>\r\n        <CardContent>\r\n            <Typography id=\"text\">\r\n                {selectedQuote.quote} - <span id=\"author\">{selectedQuote.author}</span>\r\n            </Typography>\r\n        </CardContent>\r\n        <CardAction>\r\n            <Button id=\"new-quote\" size=\"small\" onClick={assignNewQuoteIndex}>\"Next quote\"</Button>\r\n            <IconButton\r\n                id=\"tweet-quote\"\r\n                target=\"_blank\"\r\n                href={`https://twitter.com/intent/tweet?text=${selectedQuote.quote}&hashtags=thewebdevcoach`}\r\n            >\r\n                <FontAwesomeIcon icon={faTwitter} size=\"md\"></FontAwesomeIcon>\r\n            </IconButton>\r\n        </CardAction>\r\n    </Card>\r\n);\r\n\r\nexport default QuoteMachine\r\n","import React from 'react';\nimport 'typeface-roboto';\nimport QuoteMachine from './components/QuoteMachine';\nimport { Grid, withStyles } from '@material-ui/core';\n\nconst styles = {\n    container: {\n        alignItems: \"center\",\n        display: \"flex\",\n        height: \"100vh\",\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            quotes: [],\n            selectedQuoteIndex: null,\n        }\n        this.generateNewQuoteIndex = this.generateNewQuoteIndex.bind(this);\n        this.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n            .then(data => data.json())\n            .then(quotes => this.setState({ quotes }, this.assignNewQuoteIndex));\n    }\n\n    get selectedQuote() {\n        if (!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)) {\n            return undefined;\n        }\n        return this.state.quotes[this.state.selectedQuoteIndex];\n    }\n\n    generateNewQuoteIndex() {\n        const len = this.state.quotes.length;\n        return len ? Math.floor(Math.random() * len) : undefined;\n    }\n\n    assignNewQuoteIndex() {\n        this.setState({selectedQuoteIndex: this.generateNewQuoteIndex()})\n    }\n    \n    nextQuoteClickHandler() {\n        alert(\"hi\")\n        console.log(\"hi\")\n    }\n\n    render() {  \n        console.log(this.state.quotes[1])\n        return (\n            <Grid className={this.props.classes.container} id=\"quote-box\" justify=\"center\" container>\n                <Grid xs={11} lg={8} item>\n                    {\n                        this.selectedQuote ?\n                            <QuoteMachine selectedQuote={this.selectedQuote} assignNewQuoteIndex={ this.assignNewQuoteIndex } />\n                         : null\n                    }\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}